{"version":3,"sources":["components/Todo/Todo.jsx","propTypesShapes/todoPropTypesShape.js","components/TodoSearch/TodoSearch.jsx","components/StatusSelect/StatusSelect.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","PropTypes","number","isRequired","bool","string","completed","title","userId","id","selectedTodoId","handleChange","className","classNames","type","readOnly","checked","value","onClick","event","TodoSearch","searchHandler","placeholder","onChange","StatusSelect","selectedStatus","handleSelect","defaultValue","TodoList","state","query","target","setState","toLowerCase","this","props","searchableTodos","todos","filter","includes","selectedTodos","todo","map","key","React","Component","BASE_URL","todosUrl","userUrl","CurrentUser","user","clearUser","clearUserId","loadUser","prevProps","fetch","then","response","json","data","name","email","phone","Object","keys","length","App","selectedUserId","selectUser","todoId","condition","checkFilterCondition","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78c38beb.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { todoPropTypesShape } from '../../propTypesShapes/todoPropTypesShape';\n\nexport const Todo = ({\n  completed,\n  title,\n  userId,\n  id,\n  selectedTodoId,\n  handleChange,\n}) => (\n  <li\n    className={classNames('TodoList__item', {\n      'TodoList__item--checked': completed,\n      'TodoList__item--unchecked': !completed,\n    })}\n  >\n    <label>\n      <input\n        type=\"checkbox\"\n        readOnly\n        checked={completed}\n      />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className={classNames('TodoList__user-button button', {\n        'TodoList__user-button--selected': selectedTodoId === id,\n      })}\n      type=\"button\"\n      value={userId}\n      onClick={(event) => {\n        handleChange(event, id);\n      }}\n    >\n      User&nbsp;#\n      {userId}\n    </button>\n\n  </li>\n);\n\nTodo.propTypes = {\n  ...todoPropTypesShape,\n  selectedTodoId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const todoPropTypesShape = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoSearch = ({ searchHandler }) => (\n  <input\n    className=\"TodoList__search\"\n    type=\"text\"\n    placeholder=\"Type search word\"\n    onChange={searchHandler}\n  />\n);\n\nTodoSearch.propTypes = {\n  searchHandler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const StatusSelect = ({ selectedStatus, handleSelect }) => (\n  <select\n    className=\"TodoList__select\"\n    value={selectedStatus}\n    onChange={handleSelect}\n  >\n    <option value=\"all\" defaultValue>all</option>\n    <option value=\"active\">active</option>\n    <option value=\"completed\">completed</option>\n  </select>\n);\n\nStatusSelect.propTypes = {\n  handleSelect: PropTypes.func.isRequired,\n  selectedStatus: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { TodoSearch } from '../TodoSearch/TodoSearch';\nimport { StatusSelect } from '../StatusSelect/StatusSelect';\nimport { todoPropTypesShape } from '../../propTypesShapes/todoPropTypesShape';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedStatus: '',\n  }\n\n  searchHandler = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      query: value.toLowerCase(),\n    });\n  }\n\n  handleSelect = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectedStatus: value,\n    });\n  }\n\n  render() {\n    const { query, selectedStatus } = this.state;\n    const { selectedTodoId, handleChange, todos } = this.props;\n\n    const searchableTodos = todos.filter(({ title }) => (\n      title.toLowerCase().includes(query)\n    ));\n\n    let selectedTodos = '';\n\n    if (selectedStatus === '') {\n      selectedTodos = searchableTodos;\n    } else {\n      selectedTodos = searchableTodos.filter((todo) => {\n        if (selectedStatus === 'active') {\n          return todo.completed === false;\n        }\n\n        if (selectedStatus === 'completed') {\n          return todo.completed === true;\n        }\n\n        return true;\n      });\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <TodoSearch searchHandler={this.searchHandler} />\n        <StatusSelect\n          selectedStatus={selectedStatus}\n          handleSelect={this.handleSelect}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectedTodos.map(({ id, completed, title, userId }) => (\n              <Todo\n                key={id}\n                completed={completed}\n                title={title}\n                userId={userId}\n                id={id}\n                selectedTodoId={selectedTodoId}\n                handleChange={handleChange}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      ...todoPropTypesShape,\n    }).isRequired,\n  ).isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","const BASE_URL = `https://mate-api.herokuapp.com`;\nconst todosUrl = `${BASE_URL}/todos`;\nconst userUrl = `${BASE_URL}/users/`;\n\nfunction checkFilterCondition(todo) {\n  let condition = true;\n\n  if (todo.userId === null) {\n    condition = false;\n  }\n\n  if (todo.title === '') {\n    condition = false;\n  }\n\n  if (todo.completed === null) {\n    condition = false;\n  }\n\n  return condition;\n}\n\nexport function getTodos() {\n  return fetch(todosUrl)\n    .then(response => response.json())\n    .then(todos => todos.data\n      .filter(todo => checkFilterCondition(todo)));\n}\n\nexport function getUser(userId) {\n  return fetch(`${userUrl}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: {},\n    });\n\n    this.props.clearUserId();\n  }\n\n  loadUser() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({\n          user: { ...user.data },\n        });\n      });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <>\n        {Object.keys(this.state.user).length && (\n          <>\n            <div>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clearUser}\n              >\n                Clear\n              </button>\n            </div>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${id}`}</span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{name}</h3>\n              <p className=\"CurrentUser__email\">{email}</p>\n              <p className=\"CurrentUser__phone\">{phone}</p>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: [...todos],\n        });\n      })\n      .catch(() => {\n        this.setState({\n          todos: [],\n        });\n      });\n  }\n\n  selectUser = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectedUserId: value,\n    });\n  }\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n      selectedTodoId: 0,\n    });\n  }\n\n  handleChange = (event, todoId) => {\n    this.setState({\n      selectedTodoId: todoId,\n    });\n\n    this.selectUser(event);\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedTodoId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            handleChange={this.handleChange}\n            selectedTodoId={selectedTodoId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}