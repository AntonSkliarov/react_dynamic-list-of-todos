{"version":3,"sources":["components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","completed","title","userId","id","selectedTodoId","handleChange","className","type","readOnly","checked","classNames","value","onClick","event","TodoList","state","query","selectedOption","searchHandler","target","setState","toLowerCase","handleSelect","this","props","selectedTodos","todos","filter","includes","todo","placeholder","onChange","disabled","defaultValue","map","key","React","Component","BASE_URL","todosUrl","userUrl","getUser","fetch","then","response","json","CurrentUser","user","clearUser","clearUserId","data","prevProps","name","email","phone","Object","keys","length","App","selectedUserId","selectUser","todoId","ReactDOM","render","document","getElementById"],"mappings":"uXAIO,SAASA,EAAT,GAOH,IANFC,EAMC,EANDA,UACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,GACAC,EAEC,EAFDA,eACAC,EACC,EADDA,aAEA,OACE,wBACEC,UAAWN,EACP,yCACA,4CAEJ,+BACE,2BACEO,KAAK,WACLC,UAAQ,EACRC,QAAST,IAEX,2BAAIC,IAGN,4BACEK,UAAWI,IAAW,+BAAgC,CACpD,kCAAmCN,IAAmBD,IAExDI,KAAK,SACLI,MAAOT,EACPU,QAAS,SAACC,GACRR,EAAaQ,EAAOV,KAPxB,YAWGD,ICjCF,IAAMY,EAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,eAAgB,IAHpB,EAMEC,cAAgB,SAACL,GAAW,IAClBF,EAAUE,EAAMM,OAAhBR,MAER,EAAKS,SAAS,CACZJ,MAAOL,EAAMU,iBAVnB,EAcEC,aAAe,SAACT,GAAW,IACjBF,EAAUE,EAAMM,OAAhBR,MAER,EAAKS,SAAS,CACZH,eAAgBN,KAlBtB,uDAsBY,IAAD,EAC2BY,KAAKR,MAA/BC,EADD,EACCA,MAAOC,EADR,EACQA,eADR,EAEyCM,KAAKC,MAA7CpB,EAFD,EAECA,eAAgBC,EAFjB,EAEiBA,aAMlBoB,EARC,EAE+BC,MAERC,QAAO,qBAAG1B,MAChCoB,cAAcO,SAASZ,MAGOW,QAAO,SAACE,GAC5C,MAAuB,WAAnBZ,GACwB,IAAnBY,EAAK7B,UAGS,cAAnBiB,IACwB,IAAnBY,EAAK7B,aAMhB,OACE,yBAAKM,UAAU,YACb,sCACA,2BACEA,UAAU,mBACVC,KAAK,OACLuB,YAAY,mBACZC,SAAUR,KAAKL,gBAGjB,4BACEZ,UAAU,mBACVK,MAAOM,EACPc,SAAUR,KAAKD,cAEf,4BACEX,MAAM,GACNqB,UAAQ,EACRC,cAAY,GAHd,iCAOA,4BAAQtB,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,cAGF,yBAAKL,UAAU,4BACb,wBAAIA,UAAU,kBACXmB,EAAcS,KAAI,gBAAG/B,EAAH,EAAGA,GAAIH,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,OAAzB,OACjB,kBAACH,EAAD,CACEoC,IAAKhC,EACLH,UAAWA,EACXC,MAAOA,EACPC,OAAQA,EACRC,GAAIA,EACJC,eAAgBA,EAChBC,aAAcA,cA/E9B,GAA8B+B,IAAMC,W,OCL9BC,G,MAAQ,kCACRC,EAAQ,UAAMD,EAAN,UACRE,EAAO,UAAMF,EAAN,WAiBN,SAASG,EAAQvC,GACtB,OAAOwC,MAAM,GAAD,OAAIF,GAAJ,OAActC,IACvByC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UChBxB,IAAMC,EAAb,4MACE/B,MAAQ,CACNgC,KAAM,IAFV,EAyBEC,UAAY,WACV,EAAK5B,SAAS,CACZ2B,KAAM,KAGR,EAAKvB,MAAMyB,eA9Bf,kEAKuB,IAAD,OAClBR,EAAQlB,KAAKC,MAAMtB,QAChByC,MAAK,SAACI,GACL,EAAK3B,SAAS,CACZ2B,KAAK,eAAMA,EAAKG,aAT1B,yCAcqBC,GAAY,IAAD,OACxBA,EAAUjD,SAAWqB,KAAKC,MAAMtB,QAClCuC,EAAQlB,KAAKC,MAAMtB,QAChByC,MAAK,SAACI,GACL,EAAK3B,SAAS,CACZ2B,KAAK,eAAMA,EAAKG,aAnB5B,+BAiCY,IAAD,EAC4B3B,KAAKR,MAAMgC,KAAtC5C,EADD,EACCA,GAAIiD,EADL,EACKA,KAAMC,EADX,EACWA,MAAOC,EADlB,EACkBA,MAEzB,OACE,oCAC2C,IAAxCC,OAAOC,KAAKjC,KAAKR,MAAMgC,MAAMU,QAC5B,oCACE,6BACE,4BACEnD,UAAU,SACVC,KAAK,SACLK,QAASW,KAAKyB,WAHhB,UAQF,yBAAK1C,UAAU,eACb,wBAAIA,UAAU,sBACZ,uDAAyBH,KAG3B,wBAAIG,UAAU,qBAAqB8C,GACnC,uBAAG9C,UAAU,sBAAsB+C,GACnC,uBAAG/C,UAAU,sBAAsBgD,UAxDjD,GAAiClB,IAAMC,WCqExBqB,E,4MAlEb3C,MAAQ,CACNW,MAAO,GACPiC,eAAgB,EAChBvD,eAAgB,G,EAYlBwD,WAAa,SAAC/C,GAAW,IACfF,EAAUE,EAAMM,OAAhBR,MAER,EAAKS,SAAS,CACZuC,eAAgBhD,K,EAIpBsC,YAAc,WACZ,EAAK7B,SAAS,CACZuC,eAAgB,EAChBvD,eAAgB,K,EAIpBC,aAAe,SAACQ,EAAOgD,GACrB,EAAKzC,SAAS,CACZhB,eAAgByD,IAGlB,EAAKD,WAAW/C,I,kEA7BG,IAAD,OFTb6B,MAAMH,GACVI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAK,OAAIA,EAAMwB,KAClBvB,QAAO,SAAAE,GAAI,OACM,OAAhBA,EAAK3B,UAENyB,QAAO,SAAAE,GAAI,MACK,KAAfA,EAAK5B,SAEN0B,QAAO,SAAAE,GAAI,OACS,OAAnBA,EAAK7B,gBECN2C,MAAK,SAACjB,GACL,EAAKN,SAAS,CACZM,MAAM,YAAKA,U,+BA4BT,IAAD,EAC2CH,KAAKR,MAA/CW,EADD,EACCA,MAAOiC,EADR,EACQA,eAAgBvD,EADxB,EACwBA,eAE/B,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEoB,MAAOA,EACPrB,aAAckB,KAAKlB,aACnBD,eAAgBA,KAIpB,yBAAKE,UAAU,gBACb,yBAAKA,UAAU,0BACZqD,EACC,kBAAC,EAAD,CACEzD,OAAQyD,EACRV,YAAa1B,KAAK0B,cAElB,0B,GA3DEb,IAAMC,WCHxByB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c961e37d.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport function Todo({\n  completed,\n  title,\n  userId,\n  id,\n  selectedTodoId,\n  handleChange,\n}) {\n  return (\n    <li\n      className={completed\n        ? 'TodoList__item TodoList__item--checked'\n        : 'TodoList__item TodoList__item--unchecked'}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          readOnly\n          checked={completed}\n        />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={classNames('TodoList__user-button button', {\n          'TodoList__user-button--selected': selectedTodoId === id,\n        })}\n        type=\"button\"\n        value={userId}\n        onClick={(event) => {\n          handleChange(event, id);\n        }}\n      >\n        User&nbsp;#\n        {userId}\n      </button>\n\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedOption: '',\n  }\n\n  searchHandler = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      query: value.toLowerCase(),\n    });\n  }\n\n  handleSelect = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectedOption: value,\n    });\n  }\n\n  render() {\n    const { query, selectedOption } = this.state;\n    const { selectedTodoId, handleChange, todos } = this.props;\n\n    const searchableTodos = todos.filter(({ title }) => (\n      title.toLowerCase().includes(query)\n    ));\n\n    const selectedTodos = searchableTodos.filter((todo) => {\n      if (selectedOption === 'active') {\n        return todo.completed === false;\n      }\n\n      if (selectedOption === 'completed') {\n        return todo.completed === true;\n      }\n\n      return true;\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          className=\"TodoList__search\"\n          type=\"text\"\n          placeholder=\"Type search word\"\n          onChange={this.searchHandler}\n        />\n\n        <select\n          className=\"TodoList__select\"\n          value={selectedOption}\n          onChange={this.handleSelect}\n        >\n          <option\n            value=\"\"\n            disabled\n            defaultValue\n          >\n            Choose the status of the task\n          </option>\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectedTodos.map(({ id, completed, title, userId }) => (\n              <Todo\n                key={id}\n                completed={completed}\n                title={title}\n                userId={userId}\n                id={id}\n                selectedTodoId={selectedTodoId}\n                handleChange={handleChange}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","const BASE_URL = `https://mate-api.herokuapp.com`;\nconst todosUrl = `${BASE_URL}/todos`;\nconst userUrl = `${BASE_URL}/users/`;\n\nexport function getTodos() {\n  return fetch(todosUrl)\n    .then(response => response.json())\n    .then(todos => todos.data\n      .filter(todo => (\n        todo.userId !== null\n      ))\n      .filter(todo => (\n        todo.title !== ''\n      ))\n      .filter(todo => (\n        todo.completed !== null\n      )));\n}\n\nexport function getUser(userId) {\n  return fetch(`${userUrl}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({\n          user: { ...user.data },\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((user) => {\n          this.setState({\n            user: { ...user.data },\n          });\n        });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: {},\n    });\n\n    this.props.clearUserId();\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <>\n        {Object.keys(this.state.user).length !== 0 && (\n          <>\n            <div>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clearUser}\n              >\n                Clear\n              </button>\n            </div>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${id}`}</span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{name}</h3>\n              <p className=\"CurrentUser__email\">{email}</p>\n              <p className=\"CurrentUser__phone\">{phone}</p>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: [...todos],\n        });\n      });\n  }\n\n  selectUser = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectedUserId: value,\n    });\n  }\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n      selectedTodoId: 0,\n    });\n  }\n\n  handleChange = (event, todoId) => {\n    this.setState({\n      selectedTodoId: todoId,\n    });\n\n    this.selectUser(event);\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedTodoId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            handleChange={this.handleChange}\n            selectedTodoId={selectedTodoId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}