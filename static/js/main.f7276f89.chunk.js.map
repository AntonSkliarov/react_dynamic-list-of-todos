{"version":3,"sources":["components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","completed","title","userId","id","selectedTodoId","handleChange","className","type","readOnly","checked","classNames","value","onClick","event","TodoList","todos","map","key","BASE_URL","todosUrl","userUrl","getUser","fetch","then","response","json","CurrentUser","state","user","clearUser","setState","props","clearUserId","this","data","prevProps","name","email","phone","Object","keys","length","React","Component","App","selectedUserId","selectUser","target","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7276f89.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport function Todo({\n  completed,\n  title,\n  userId,\n  id,\n  selectedTodoId,\n  handleChange,\n}) {\n  return (\n    <li\n      className={completed\n        ? 'TodoList__item TodoList__item--checked'\n        : 'TodoList__item TodoList__item--unchecked'}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          readOnly\n          checked={completed}\n        />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={classNames('TodoList__user-button button', {\n          'TodoList__user-button--selected': selectedTodoId === id,\n        })}\n        type=\"button\"\n        value={userId}\n        onClick={(event) => {\n          handleChange(event, id);\n        }}\n      >\n        User&nbsp;#\n        {userId}\n      </button>\n\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nexport function TodoList({ todos, selectedTodoId, handleChange }) {\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(({ id, completed, title, userId }) => (\n            <Todo\n              key={id}\n              completed={completed}\n              title={title}\n              userId={userId}\n              id={id}\n              selectedTodoId={selectedTodoId}\n              handleChange={handleChange}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","const BASE_URL = `https://mate-api.herokuapp.com`;\nconst todosUrl = `${BASE_URL}/todos`;\nconst userUrl = `${BASE_URL}/users/`;\n\nexport function getTodos() {\n  return fetch(todosUrl)\n    .then(response => response.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${userUrl}${userId}`)\n    .then(response => response.json());\n}\n\n// export const request = (url) => {\n//   return fetch(`${BASE_URL}${url}`)\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({\n          user: { ...user.data },\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((user) => {\n          this.setState({\n            user: { ...user.data },\n          });\n        });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: {},\n    });\n\n    this.props.clearUserId();\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <>\n        {Object.keys(this.state.user).length !== 0 && (\n          <>\n            <div>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clearUser}\n              >\n                Clear\n              </button>\n            </div>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${id}`}</span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{name}</h3>\n              <p className=\"CurrentUser__email\">{email}</p>\n              <p className=\"CurrentUser__phone\">{phone}</p>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: [...todos.data],\n        });\n      });\n  }\n\n  selectUser = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectedUserId: value,\n    });\n  }\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n      selectedTodoId: 0,\n    });\n  }\n\n  handleChange = (event, todoId) => {\n    this.setState({\n      selectedTodoId: todoId,\n    });\n\n    this.selectUser(event);\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedTodoId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            handleChange={this.handleChange}\n            selectedTodoId={selectedTodoId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}